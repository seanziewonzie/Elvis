function varargout = leastTime2(varargin)

%
% Author: 
%   Zachary Bradshaw
%
%Notes:
%   Want to discretize original angle theta and keep track of parameters
%   use Snell's law at boundary
%
% Usage: 
%   leastTime  - function that creates gui & components
%   varargout - represents any number of output arguments
%   varargin  - represents any number of input arguments
% 
% [fig] - add initial figure
fig = figure(...
    'Tag',             'fig',...
    'Name',            'Least Time Interface',...
    'NumberTitle',     'off',...
    'Visible',         'on',... 
    'MenuBar',         'none',...
    'Units',           'normalized',...
    'UserData',        struct(... % use for passing params
                            'plotData',[],...
                            'resultData',[]...
                       ),...
    'Position',        [.1 .1 .75 .75]);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Add Toolbar & Push Buttons                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% add toolbar
tb = uitoolbar('Parent',fig);

% get open icon png & convert to use in toolbar
[img_open,~,alpha] = imread(fullfile(matlabroot,...
    'toolbox/matlab/icons/file_open.png'));
openIcon = double(img_open)/256/256;
openIcon(~alpha) = NaN;

% get save icon png & convert to use in toolbar
[img_save,~,alpha] = imread(fullfile(matlabroot,...
    'toolbox/matlab/icons/file_save.png'));
saveIcon = double(img_save)/256/256;
saveIcon(~alpha) = NaN;

% get pan icon png & convert to use in toolbar
[img_save,~,alpha] = imread(fullfile(matlabroot,...
    'toolbox/matlab/icons/tool_hand.png'));
panIcon = double(img_save)/256/256;
panIcon(~alpha) = NaN;

% get zoom in icon png & convert to use in toolbar
[img_save,~,alpha] = imread(fullfile(matlabroot,...
    'toolbox/matlab/icons/tool_zoom_in.png'));
zoomInIcon = double(img_save)/256/256;
zoomInIcon(~alpha) = NaN;

% get zoom in icon png & convert to use in toolbar
[img_save,~,alpha] = imread(fullfile(matlabroot,...
    'toolbox/matlab/icons/tool_zoom_out.png'));
zoomOutIcon = double(img_save)/256/256;
zoomOutIcon(~alpha) = NaN;

% [openBtn] - open button
uipushtool(...
    'Parent',          tb,...
    'Tag',             'openBtn',...
    'CData',           openIcon,...
    'TooltipString',   'Open File',...
    'ClickedCallback', @openBtnCallback);

% [saveBtn] - save button
uipushtool(...
    'Parent',          tb,...
    'Tag',             'saveBtn',...
    'CData',           saveIcon,...
    'TooltipString',   'Save File',...
    'ClickedCallback', @saveBtnCallback);

% [panBtn] - pan button
uipushtool(...
    'Parent',          tb,...
    'Tag',             'panBtn',...
    'CData',           panIcon,...
    'TooltipString',   'pan tool',...
    'ClickedCallback', 'pan');

% [zoomInBtn] - zoom in button
uipushtool(...
    'Parent',          tb,...
    'Tag',             'zoomInBtn',...
    'CData',           zoomInIcon,...
    'TooltipString',   'zoom in tool',...
    'ClickedCallback', 'zoom');

% [zoomOutBtn] - zoom out button (just resets zoom settings)
uipushtool(...
    'Parent',          tb,...
    'Tag',             'zoomOutBtn',...
    'CData',           zoomOutIcon,...
    'TooltipString',   'zoom out to initial zoom setting',...
    'ClickedCallback', 'zoom out');

% [speed1 Static]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'r1Static',...
    'Style',           'text',...
    'String',          'Speed 1 :',...
    'FontSize',        12,...
    'HorizontalAlignment', 'right',...
    'Units',           'normalized',...
    'Position',        [.65 .9 .1 .05]);

% [speed2 Static]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'r2Static',...
    'Style',           'text',...
    'String',          'Speed 2 :',...
    'FontSize',        12,...
    'HorizontalAlignment', 'right',...
    'Units',           'normalized',...
    'Position',        [.65 .8 .1 .1]);

% [y Start Position Static]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'ystartPStatic',...
    'Style',           'text',...
    'String',          'Y Start Coordinate :',...
    'FontSize',        12,...
    'HorizontalAlignment', 'right',...
    'Units',           'normalized',...
    'Position',        [.6 .75 .15 .1]);

% [Time Static]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'timeStatic',...
    'Style',           'text',...
    'String',          'Time :',...
    'FontSize',        12,...
    'HorizontalAlignment', 'right',...
    'Units',           'normalized',...
    'Position',        [.65 .7 .1 .1]);

% [Discrete Static]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'discStatic',...
    'Style',           'text',...
    'String',          'Disc. Factor :',...
    'FontSize',        12,...
    'HorizontalAlignment', 'right',...
    'Units',           'normalized',...
    'Position',        [.6 .65 .15 .1]);

% [speed1]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'speed1',...
    'Style',           'edit',...
    'String',          '0',...      % initial value
    'Units',           'normalized',...
    'Position',        [.75 .9 .15 .05]);

% [speed2]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'speed2',...
    'Style',           'edit',...
    'String',          '0',...      % initial value
    'Units',           'normalized',...
    'Position',        [.75 .85 .15 .05]);

% [y start position]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'ystartP',...
    'Style',           'edit',...
    'String',          '0',...      % initial value
    'Units',           'normalized',...
    'Position',        [.75 .8 .15 .05]);

% [time]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'time',...
    'Style',           'edit',...
    'String',          '0',...      % initial value
    'Units',           'normalized',...
    'Position',        [.75 .75 .15 .05]);

% [discFactor]
uicontrol(...
    'Parent',          fig,...
    'Tag',             'discFactor',...
    'Style',           'edit',...
    'String',          '150',...      % initial value
    'Units',           'normalized',...
    'Position',        [.75 .698 .15 .05]);

%run button
uicontrol(...
    'Parent',       fig,...
    'Tag',             'runBtn',...
    'Style',           'pushbutton',...
    'String',          'Run Simulation',...
    'FontSize',        12,...
    'FontWeight',      'bold',...
    'Units',           'normalized',...
    'Position',        [.45 .05 .15 .1],...
    'Callback',        @run_button_Callback);


%%%% BEGINNING GEORGE BILLY
%zoom_box button
uicontrol(...
    'Parent',           fig,...
    'Tag',             'zoomboxBtn',...
    'Style',           'pushbutton',...
    'String',          'Zoom in on Snells Area',...
    'FontSize',        10,...
    'FontWeight',      'bold',...
    'Units',           'normalized',...
    'Position',        [.75 .60 .15 .05],...
    'Callback',        @zoombox_button_Callback);
%%%% ENDING GEORGE BILLY

% [axes] - add axes for plot
axes(...
    'Parent',          fig,...
    'Tag',             'axes',...
    'Units',           'normalized',...
    'Position',        [.05 .4 .5 .5]);
end

%%%% BEGINNING GEORGE BILLY
function zoombox_button_Callback(hObject,callbackdata)
    data = guidata(hObject);
    handles = guihandles;
    %Gets y0 and sets it as bottom of graph box, -y0 as top
    ystartP = str2double(get(handles.ystartP, 'String')); %y-coordinate of start position
    curFig = gcf;
    axis([ystartP -ystartP ystartP -ystartP])
end
%%%% ENDING GEORGE BILLY

%need to comment the algorithm
%ultimately want to show feasible set
function run_button_Callback(hObject,callbackdata)
    data = guidata(hObject);
    handles = guihandles;
    %turn buttons off while running
    allEnabled = findobj(handles.fig,'Enable','on');
    set(allEnabled,'Enable','off');
    
    %grab the old value of the button string
    oldVal = get(hObject, 'String');
    %change string to running
    set(hObject, 'String', 'Running...');
    drawnow;
    
    %get the input arguments
    r1 = str2double(get(handles.speed1, 'String')); %speed in first region
    r2 = str2double(get(handles.speed2, 'String')); %speed in second region
%     xstartP = str2double(get(handles.xstartP, 'String')); %x-coordinate of starting position
    ystartP = str2double(get(handles.ystartP, 'String')); %y-coordinate of start position
    time = str2double(get(handles.time, 'String')); %time to travel
    discFactor = str2double(get(handles.discFactor, 'String')); %amount to discretize
    
    %get the current figure
    curFig = gcf;
    cla;
    angles = linspace(0,2*pi,discFactor);
    critAng = asin(r1/r2);
    angles = [angles pi/2-critAng pi/2+critAng];
    maxDist = max(r1,r2)*time;
%     startBL = xstartP - maxDist;
    startBL = -maxDist;
%     endBL = xstartP + maxDist;
    endBL = maxDist;
    plot([startBL endBL],[0 0],'b'); axis equal;
    hold on;
%     radius = r1*time;
%     delta = 2*pi/120;
%     alpha = acos(abs(ystartP)/radius);
%     N = floor((2*pi-2*alpha)/delta);
%     n = 1:N;
%     x_r1 = -radius.*sin(alpha+n.*delta)+xstartP;
%     y_r1 = radius.*cos(alpha+n.*delta)+ystartP;
%     figure; plot([xstartP x_r1],[ystartP y_r1]);
%     x_BL = sqrt(radius^2-ystartP^2)+xstartP;
%     x_BR = sqrt(radius^2-ystartP^2)-xstartP;
    for i = 1:length(angles)
%         calculate(r1,r2,xstartP,ystartP,time,angles,i,critAng)
        calculate(r1,r2,ystartP,time,angles,i,critAng)
    end %end for loop
    
    hObject.String = oldVal;
        
    % reenable all gui elements
    set(allEnabled,'Enable','on');
end
    
function calculate(r1,r2,ystartP,time,angles,i,critAng)
    lineEndY = r1*time*sin(angles(i))+ystartP;
    if lineEndY>0
        %then we touch the boundary
        %t1 = time in region 1
        t1 = sqrt((abs(ystartP)/tan(angles(i)))^2+ystartP^2)/r1;
        %t2 = time in region 2
        t2 = time-t1;
        %x2 = x coordinate of end point
        x2 = (abs(ystartP)/tan(angles(i)))*(r2^2)*t2/(sqrt((abs(ystartP)/tan(angles(i)))^2+ystartP^2)*r1)+(abs(ystartP)/tan(angles(i)));
        %y2 = y coordinate of end point
        y2 = sqrt((r2*t2)^2-(x2-(abs(ystartP)/tan(angles(i))))^2);
        if real(y2) > 0
%             plotTrajects(xstartP,xstartP+abs(ystartP)/tan(angles(i)),ystartP,0)
%             plotTrajects(xstartP+abs(ystartP)/tan(angles(i)),xstartP+x2,0,y2)
            plotTrajects(0,abs(ystartP)/tan(angles(i)),ystartP,0)
            plotTrajects(abs(ystartP)/tan(angles(i)),x2,0,y2)
        end
        if angles(i) == pi/2-critAng && r2>r1
%             disc = linspace(xstartP+abs(ystartP)/tan(angles(i)),x2,20);
            disc = linspace(abs(ystartP)/tan(angles(i)),x2,20);
            for j = 1:length(disc)
%                 t3 = time - (t1+(disc(j)-(xstartP+abs(ystartP)/tan(angles(i))))/r2);
                t3 = time - (t1+(disc(j)-(abs(ystartP)/tan(angles(i))))/r2);
                plotTrajects(disc(j),disc(j)+sin(critAng)*t3*r1,0,-t3*r1*cos(critAng))
            end
        elseif angles(i) == pi/2+critAng && r2>r1
%             disc_dist = xstartP+abs(ystartP)/tan(angles(i));
            disc_dist = abs(ystartP)/tan(angles(i));
            disc = linspace(x2,disc_dist,20);
            for j = 1:length(disc)
                t3 = time - (t1+abs(disc(j)-disc_dist)/r2);
                plotTrajects(disc(j),disc(j)-sin(critAng)*t3*r1,0,-t3*r1*cos(critAng))
            end
        end


    else
        %then we don't touch the boundary
        totDist = r1*time;
%         x = xstartP + totDist*cos(angles(i));
        x = totDist*cos(angles(i));
        %whether or not term 2 in y is negative depends on angle
        y = ystartP + totDist*sin(angles(i));
        plotTrajects(0,x,ystartP,y)
    end %end if statement 
end

function plotTrajects(x0,x1,y0,y1)
    plot([x0 x1],[y0 y1],'b'); axis equal;
    hold on;
end

    
    
    

